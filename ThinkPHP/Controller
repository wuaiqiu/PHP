				Controller



1.访问控制器(Application/Home/Controller)
	
	控制器类的命名方式是：控制器名+Controller
	控制器文件的命名方式是：类名+class.php（类文件后缀）

	默认控制器文件	：IndexController.class.php

	
	（1）定义命名空间：相当于当前文件
	
	namespace Home\Controller

	（2）加载文件ThinkPHP/Library/Think/Controller.class.php

	use Think\Controller;

	(3)控制类

	class UserController extends Controller {
		    public function user(){
		        echo "hello,user";
	    }
	}

	访问http://localhost/day6/index.php/Home/User/user


2.控制器操作

	(1)解决操作名与关键字冲突
		
		//设置操作名后缀
		
		'ACTION_SUFFIX'=>'Action'


		//class操作
		
		public function classAction(){
		        echo "这是class操作";
		 }
		

		//访问该class操作
	
		http://localhost/day6/Home/User/class


	(2)控制器分层

		默认Controller下的控制器称为访问控制器，禁止他人访问为事件控制器

		a.在Home下建立Event目录事件控制器

		b.创建UserEvent控制器

			namespace Home\Event;
			use Think\Controller;

			class UserEvent extends Controller{
    			        public function test(){
			            echo "这是Event下的test";
		        	}
			}

		d.调用UserEvent控制器

			$obj=new UserEvent();
		    	$obj->test();		

			或者

			 $obj=A('User','Event');	//A('操作名','模块名')
			 $obj->test();



	(3)控制器分级
		
		即Controller目录下可以存在子目录

		a.配置允许二级控制器

			'CONTROLLER_LEVEL'=>2
		
		b.在Home/Controller目录下创建User目录
	
		c.在User目录下IndexController.class.php

		namespace Home\Controller\User;
		use Think\Controller;
		class IndexController extends Controller {
		    public function index(){
		        echo "<meta charset='utf8'/>";
		        echo "index";    
		    }
		}
		
		===>	http://localhost/day6/Home/User/Index/index
		
	
	(4)两个特殊的操作名

		a.前置操作

			public function _before_操作名(){
			        echo "前置<br/>";
			   }

		b.后置操作

			 public function _after_操作名(){
			        echo "<br/>后置";	
			    }

			 
		
		
	(5)Action参数绑定

		a.配置action参数绑定，默认为true

		'URL_PARAMS_BIND'=>true

		b.传参		

		 public function index($id){
    			echo "id=$id";        
		 }

		==>	http://localhost/day6/Home/User/index/id/5

		c.可以设置顺序传参

		'URL_PARAMS_BIND_TYPE'=>1

		===>	http://localhost/day6/Home/User/index/5



	(6)跳转与重定向

		a.成功跳转与错误跳转

			success('提示信息','跳转地址','跳转时间')
			
			error('提示信息','跳转地址','跳转时间')


			// 操作完成3秒后跳转到 
			$this->success('操作完成','/Public/success.php',3);
			// 操作失败5秒后跳转到
			$this->error('操作失败','//Public/success.php',5);
		

			配置默认跳转页面
	
			/默认错误跳转对应的模板文件
			'TMPL_ACTION_ERROR' => THINK_PATH . 'Tpl/dispatch_jump.tpl',
			//默认成功跳转对应的模板文件
			'TMPL_ACTION_SUCCESS' => THINK_PATH . 'Tpl/dispatch_jump.tpl',


			模板文件可以使用模板标签

			$message	页面提示信息
			$error		页面错误提示信息
			$waitSecond	跳转等待时间 单位为秒
			$jumpUrl	跳转页面地址


		b.重定向
			

			$this->redirect('New/category', array('cate_id' => 2), 5, '页面跳转中...');
			
		
			redirect('http://www.baidu.com', 5, '页面跳转中...')



	(7)输入变量

		//获取指定变量
		I('变量类型.变量名',['默认值'])

		变量类型

		get	获取GET参数
		post	获取POST参数
		param	自动判断请求类型获取GET、POST或者PUT参数
		request	获取REQUEST 参数
		put	获取PUT 参数
		session	获取 $_SESSION 参数
		cookie	获取 $_COOKIE 参数
		server	获取 $_SERVER 参数
		globals	获取 $GLOBALS参数
		path	获取 PATHINFO模式的URL参数
		data	获取 其他类型的参数，需要配合额外数据源参数


		echo I('get.id'); // 相当于 $_GET['id']
		echo I('get.');		//获取所有get参数
		echo I('get.id',0); // 如果不存在$_GET['id'] 则返回0
		I('id'); // 等同于 I('param.id')
		
	
	(8)请求类型

		
		IS_GET	判断是否是GET方式提交
		IS_POST	判断是否是POST方式提交
		IS_PUT	判断是否是PUT方式提交
		IS_DELETE	判断是否是DELETE方式提交
		IS_AJAX	判断是否是AJAX提交
		REQUEST_METHOD	当前提交类型


	(9)空操作与空控制器

		a.空操作指的是控制器中没有的操作
		
			public function _empty(){
				echo "没有".ACTION_NAME;
			}

		b.空控制器

			class EmptyController extends Controller{

				function index(){
					echo "没有".CONTROLLER_NAME;
				}
			}



3.SESSION与COOKIE操作

	
	a.SESSION

		session参数包括

		id	session_id值
		name	session_name 值
		path	session_save_path 值
		prefix	session 本地化空间前缀
		expire	session.gc_maxlifetime 设置值
		domain	session.cookie_domain 设置值
		use_cookies	session.use_cookies 设置值
		use_trans_sid	session.use_trans_sid 设置值
		type	session处理类型，支持驱动扩展


		//手工初始化
		session(array('name'=>'session_id','expire'=>3600));

		//配置文件手工初始化
		SESSION_OPTIONS=>array(
			'name'=>'session_id',
			'expire'=>3600
		)
	
		//自动初始化
		'SESSION_AUTO_START' =>true

		//session赋值
		session('name','value');

		//session取值
		$value = session('name');

		//session删除
		session('name',null);
		session(null); //全部删除

		//session判断
		session('?name');

		//session管理
		session('[操作名]');
		
		操作名	含义
		start	启动session
		pause	暂停session写入
		destroy	销毁session
		regenerate	重新生成session id
		

	b.COOKIE


		//Cookie设置
		cookie('name','value');  //设置cookie
		cookie('name','value',array('expire'=>3600,'prefix'=>'think_'))	//数组型参数
		cookie('name','value','expire=3600&prefix=think_')	//字符型参数

		
		//Cookie获取
		$value = cookie('name');

		//Cookie删除
		cookie('name',null);
		cookie(null); // 清空当前设定前缀的所有cookie值
