					ruby (一)

一.ruby语法

	ruby是解释型语言，动态语言

	静态语言，在编译阶段，编译器都会检查方法调用的对象是否有一个这样的方法，如果没有就直接报错

	动态语言，只有真正调用这个方法的时候，找不到这个方法才会报错错误，


	(1)设置编码
	
	====================================================
		#!/usr/bin/ruby -w
		#coding=utf-8
 
		puts "你好，世界！";
	====================================================



	(2)ruby的结束

		Ruby 把分号和换行符解释为语句的结尾。但是，如果 Ruby 在行尾
	
	遇到运算符，比如 +、- 或反斜杠，它们表示一个语句的延续。
	
	
	(3)Ruby 中的 Here Document
		
		如果终止符用引号括起，引号的类型决定了面向行的字符串类型
	====================================================
		print <<EOF
		    这是第一种方式创建here document 。
		    多行字符串。
		EOF
	 ====================================================
		print <<"EOF"                # 与上面相同
		    这是第二种方式创建here document 。
		    多行字符串。
		EOF
	 ====================================================
		print <<`EOF`                 # 执行命令,是esc下的" ` "
		    echo hi there
		    echo lo there
		EOF
	====================================================
	
	(4)Ruby BEGIN END语句
		
	====================================================
		puts "这是主 Ruby 程序"
 
		END {
		   puts "停止 Ruby 程序"
		}
		BEGIN {
		   puts "初始化 Ruby 程序"
		}

		>初始化 Ruby 程序
		>这是主 Ruby 程序
		>停止 Ruby 程序
	====================================================

	(5)Ruby 注释
		
		# 我是注释，请忽略我。

		=begin
		这是注释。
		这也是注释。
		这也是注释。
		这还是注释。
		=end

	

二.数据类型

	字面量（literal）：代码中能见到的值，数值，bool值，字符串等都叫字面量 
	
	(1)数值类型(Number)
		
	a)整型(Integer)
		
		0 对应 octal，0x 对应 hex，0b 对应 binary，后跟一串数字。下

	划线字符在数字字符串中被忽略。
	
	===============================================================
		a=123
		b=1_2_3
		c=0123
		d=0b1010
		e=0x123
	===============================================================

	b)浮点型(Float)
		
		它们是带有小数的数字。浮点数是类 Float 的对象

	==============================================================
		123.4                # 浮点值
		1.0e6                # 科学记数法
		4E20                 # 不是必需的
		4e+20                # 指数前的符号
	==============================================================

	(2)字符串类型(String)
		
		双引号标记的字符串允许替换和使用反斜线符号.
		单引号标记的字符串不允许替换，且只允许使用 \\ 和 \' 两个反斜线符号。	

	======================================================================

		puts 'escape using "\\"';
		puts 'That\'s right';
		
		>escape using "\"
		>That's right
	================================================================
		
		#{ expr } 替换任意 Ruby 表达式的值为一个字符串,在双引号中见效
		
		puts "相乘 : #{24*60*60}";
		
		>相乘 : 86400
	==================================================================
		
		%q 使用的是单引号引用规则，而 %Q 是双引号引用规则，后面再接一个 (! [ { 等等
		
		desc1 = %Q{Ruby 的字符串可以使用 '' 和 ""。}
		desc2 = %q|Ruby 的字符串可以使用 '' 和 ""。|
		
	--------------------------String方法-----------------------------------

		str.empty?
		如果 str 为空（即长度为 0），则返回 true。

		str.length
		返回 str 的长度。把它与 size 进行比较。
	
		str.to_f
		返回把 str 中的前导字符解释为浮点数的结果。

				
	(3)数组(Array)
		
		Ruby 数组是任何对象的有序整数索引集合。数组中的每个元素都与一个索引相关，并可
	通过索引进行获取。数组的索引从 0 开始，这与 C 或 Java 中一样。一个负数的索相对于数组
	的末尾计数的
		Ruby 数组不需要指定大小，当向数组添加元素时，Ruby 数组会自动增长。

	a)创建数组
		
		names = Array.new
		names = Array.new(20)
		
	b)赋值
		names = Array.new(4, "mac")
 		puts "#{names}"		//["mac", "mac", "mac", "mac"]

		//带有 new 的块，每个元素使用块中的计算结果来填充
		nums = Array.new(10) { |e| e = e * 2 }
 		puts "#{nums}"			//[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

		nums = Array.[](1, 2, 3, 4,5)

		nums = Array[1, 2, 3, 4,5]

		nums = [1,2,3]

		array << obj1 << obj2		//把给定的对象附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。
	
	-------------------------------------Array方法---------------------------------
				
		array[index]
		array[start, length]
		array[range]
		array.slice(index) 
		array.slice(start, length)
		array.slice(range)
		返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组
		末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。

		array.at(index)
		返回索引为 index 的元素。一个负值索引从 self 的末尾开始计数。如果索引超出范围则返回 nil。

		array.clear
		从数组中移除所有的元素。

		array.collect { |item| block }
		array.map { |item| block }
		为 self 中的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。

		array.delete_at(index)
		删除指定的 index 处的元素，并返回该元素。如果 index 超出范围，则返回 nil。

		array.each { |item| block }
		为 self 	中的每个元素调用一次 block，传递该元素作为参数。	

		array.empty?
		如果数组本身没有包含元素，则返回 true。

		array.length
		返回 self 中元素的个数。可能为零。

		array.reverse
		返回一个新的数组，包含倒序排列的数组元素。
				
		array.size
		返回 array 的长度（元素的个数）。length 的别名。

				

	(4)哈希类型
		Ruby 哈希是在大括号内放置一系列键/值对，键和值之间使用逗号和序列 => 分隔。
		
	a)创建哈希
		
		months = Hash.new
	
		months={'a'=>1,'b'=>2}		
		
		//new 创建带有默认值的哈希，不带默认值的哈希是 nil
		months = Hash.new( "month" )
		或
		months = Hash.new "month"


			
	---------------------------Hash方法--------------------------------------
		
		hash.[key]
		使用键，从哈希引用值。如果未找到键，则返回默认值。
			
		hash.[key]=value
		把 value 给定的值与 key 给定的键进行关联。
			
		hash.clear
		从哈希中移除所有的键值对。
			
		hash.delete(key) 
		通过 key 从 hash 中删除键值对。

		hash.each { |key,value| block }
		遍历 hash，为每个 key 调用一次 block，传递 key-value 作为一个二元素数组。

		hash.empty?
		检查 hash 是否为空（不包含键值对），返回 true 或 false。

		hash.has_key?(key)
		hash.include?(key)
		hash.key?(key)
		hash.member?(key)
		检查给定的 key 是否存在于哈希中，返回 true 或 false。

		hash.has_value?(value)
		检查哈希是否包含给定的 value。

		hash.invert
		创建一个新的 hash，倒置 hash 中的 keys 和 values。也就是说，在新的哈希中，hash 中的键将变成值，值将变成键。

		hash.length
		以整数形式返回 hash 的大小或长度。
			
		hash.to_a
		从 hash 中创建一个二维数组。每个键值对转换为一个数组，所有这些数组都存储在一个数组中。

		hash.to_s
		把 hash 转换为一个数组，然后把该数组转换为一个字符串。

		hash.sort
		把 hash 转换为一个包含键值对数组的二维数组，然后进行排序。
			
		hash.values
		返回一个新的数组，包含 hash 的所有值。
		
	(5)范围类型
		一个范围表示一个区间。

	a)作为序列的范围
		两点形式创建一个包含指定的最高值的范围
		三点形式创建一个不包含指定的最高值的范围。

		(1..5)        #==> 1, 2, 3, 4, 5
		(1...5)       #==> 1, 2, 3, 4
	

三.运算符

	(1)Ruby 算术运算符，假设变量 a 的值为 10，变量 b 的值为 20
	运算符	描述	实例
	+	加法 - 把运算符两边的操作数相加	a + b 将得到 30
	-	减法 - 把左操作数减去右操作数	a - b 将得到 -10
	*	乘法 - 把运算符两边的操作数相乘	a * b 将得到 200
	/	除法 - 把左操作数除以右操作数	b / a 将得到 2
	%	求模 - 把左操作数除以右操作数，返回余数	b % a 将得到 0
	**	指数 - 执行指数计算	a**b 将得到 10 的 20 次方

	(2)Ruby 比较运算符
	运算符	描述	实例
	==	检查两个操作数的值是否相等，如果相等则条件为真。	(a == b) 不为真。
	!=	检查两个操作数的值是否相等，如果不相等则条件为真。	(a != b) 为真。
	>	检查左操作数的值是否大于右操作数的值，如果是则条件为真。	(a > b) 不为真。
	<	检查左操作数的值是否小于右操作数的值，如果是则条件为真。	(a < b) 为真。
	>=	检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	(a >= b) 不为真。
	<=	检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	(a <= b) 为真。
	<=>	联合比较运算符。如果第一个操作数等于第二个操作数则返回 0，如果第一个操作数大于第
	二个操作数则返回 1，如果第一个操作数小于第二个操作数则返回 -1。	(a <=> b) 返回 -1。
	===	用于测试 case 语句的 when 子句内的相等。	(1...10) === 5 返回 true。

	(3)Ruby 赋值运算符
	运算符	描述	实例
	=	简单的赋值运算符，把右操作数的值赋给左操作数	c = a + b 将把 a + b 的值赋给 c
	+=	加且赋值运算符，把右操作数加上左操作数的结果赋值给左操作数	c += a 相当于 c = c + a
	-=	减且赋值运算符，把左操作数减去右操作数的结果赋值给左操作数	c -= a 相当于 c = c - a
	*=	乘且赋值运算符，把右操作数乘以左操作数的结果赋值给左操作数	c *= a 相当于 c = c * a
	/=	除且赋值运算符，把左操作数除以右操作数的结果赋值给左操作数	c /= a 相当于 c = c / a
	%=	求模且赋值运算符，求两个操作数的模赋值给左操作数	c %= a 相当于 c = c % a
	**=	指数且赋值运算符，执行指数计算，并赋值给左操作数	c **= a 相当于 c = c ** a

	(4)Ruby 并行赋值
	a = 10
	b = 20
	c = 30
	或
	a, b, c = 10, 20, 30

	(5)Ruby 逻辑运算符
	运算符	描述	实例
	and	称为逻辑与运算符。如果两个操作数都为真，则条件为真。	(a and b) 为真。
	or	称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。	(a or b) 为真。
	&&	称为逻辑与运算符。如果两个操作数都非零，则条件为真。	(a && b) 为真。
	||	称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。	(a || b) 为真。
	!	称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。	!(a && b) 为假。
	not	称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。	not(a && b) 为假。

	(6)Ruby 三元运算符
	运算符	描述	实例
	? :	条件表达式	如果条件为真 ? 则值为 X : 否则值为 Y

	(7)Ruby 点运算符 "." 和双冒号运算符 "::"
	
	:: 是一元运算符，允许在类或模块内定义常量、实例方法和类方法,可以从类或模块外的任何地方进行访问。

	在 Ruby 中，类方法也可以被当作常量。
	
	class Customer
		def fun
		..
		end
		@@var=1
	end
	cuts=Customer.new
	cuts.fun === cuts::fun
	#cuts::var

	如果 :: 前的表达式为类或模块名称，则返回该类或模块内对应的常量值；如果 :: 前未没有前缀表达式，则

	返回主Object类中对应的常量值。 

	MR_COUNT = 0        # 定义在主 Object 类上的常量
	module Foo
	  MR_COUNT = 0
	  ::MR_COUNT = 1    # 设置全局计数为 1
	  MR_COUNT = 2      # 设置局部计数为 2
	end
	puts MR_COUNT       # 这是全局常量
	puts Foo::MR_COUNT  # 这是 "Foo" 的局部常量


四.输出与输入
	
	(1)puts 输出语句，将在每行末尾添加一个换行符
		val1 = "This is variable one"
		val2 = "This is variable two"
		puts val1
		puts val2

	(2)gets 语句可用于获取来自名为 STDIN 的标准屏幕的用户输入。
		puts "Enter a value :"
		val = gets
		puts val

	(3)print 输出语句，不会再每行末尾添加一个换行符


五.Ruby 异常

	begin 
 
		 #抛出异常
 
	rescue	=> e #显式指定异常对象
			 $! #表示异常信息
			 $@ #表示异常出现的代码位置
	retry	# 这将把控制移到 begin 的开头
	ensure 
 		#不管有没有异常，进入该代码块
	end 

	===================================================
		begin
		  raise 'A test exception.'
		rescue Exception => e
		  puts e.message
		  puts e.backtrace.inspect
		ensure
		  puts "Ensuring execution"
		end
	=================================================



六.symbol类型


	a.每个 String 对象都是不同的，即便他们包含了相同的字符串内容；
	而对于 Symbol 对象，一个名字（字符串内容）唯一确定一个 Symbol 对象。

	=================================================================
		puts :foo.object_id
		327458
		puts :foo.object_id
		327458
		puts :"foo".object_id
		327458
		
		puts "foo".object_id
		24303850
		puts "foo".object_id
		24300010
	=================================================================



	b.Symbol 转化为 String
	使用 to_s 或 id2name 方法将 Symbol 转化为一个 String 对象：

	=================================================================
	:"I am a boy".to_s
	=>"I am a boy"
	=================================================================



	c.String 转化为 Symbol
	除了在字符串前面加冒号，还可以使用 to_sym 或 intern 方法将 String 转化为 Symbol ，如果该 Symbol 已经存在，则直接返回。
	
	=================================================================
	var1 = "test".to_sym
	=> :test
	=================================================================
