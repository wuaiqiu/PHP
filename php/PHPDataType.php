<?php
//-------------------------数据类型------------------------------------------//
/*
 * 1.基本数据类型：
 * 整型(integer)
 * 浮点型(double)
 * 布尔型(boolean)
 * 字符串型(string)
 *
 * 2.复合类型:
 * 数值类型(array)
 * 对象类型(object)
 *
 * 3.特殊类型:
 * 空类型(null)
 * 资源类型(resource)
 * 
 * 4.数据类型判断
 *      gettype($var)获取数据类型
 *      obj instanceof class 判断obj是否为class的实例
 * */



//一.整型定义
$s1=12;    //十进制定义(dec)
$s2=012;   //八进制定义(oct);其实php底下已转换成了十进制
$s3=0x12;  //十六进制定义(hex);其实php底下已转换成了十进制

//整型进制转换函数，注意只有两种进制转换函数
//1.十进制转换其他进制；参数为整型
echo "<br/>12的二进制".decbin(12);  #12的二进制1100
echo "<br/>12的八进制".decoct(12);  #12的八进制14
echo "<br/>12的十六进制".dechex(12);#12的十六进制c

//2.其他进制转换十进制；参数为字符串；
echo "<br/>101（二进制）的十进制".bindec("101"); #101（二进制）的十进制5
echo "<br/>101（八进制）的十进制".octdec("101"); #101（八进制）的十进制65
echo "<br/>101（十六进制）的十进制".hexdec("101");#101（十六进制）的十进制257
//当字符串有其他非数值字符，只取符合指定类型的数值
echo "<br/>101（二进制）的十进制".bindec("a1a0a1a");#101（二进制）的十进制5




//二.浮点型定义;
$s4=1.23;     #一般表示方法
$s5=1.23E3;   #科学计数法

//当一个整型超过PHP_INT_MAX范围时，会变成浮点类型
$s6=PHP_INT_MAX+1;
echo "<br/>s6的类型".gettype($s6);       #s6的类型double


//三.gettype($var):获取该变量的类型
echo "<br/>s1的类型".gettype($s1);       #s1的类型integer
echo "<br/>s4的类型".gettype($s4);       #s4的类型double



//--------------------------类型转换---------------------------------------//

//1.自动类型转换:
//"+"在php只做算术运算符
$s1=1+2;            #3
$s2="1"+2;          #3
$s3="1"+"2";        #3
$s4=1+"2abc";       #3
$s5=1+"a2bc";       #3
$s6="a1"+"b2";      #3


//2.强制类型转换:
$v1=12;
$v2=(float)$v1;
$v3=(string)$v1;
echo gettype($v1);   #integer
echo gettype($v2);   #double
echo gettype($v3);   #string


//----------------------------值传递与引用传递---------------------//
/*
 *  (1)所有基本数据类型 默认是值传递，通过加 & 可以引用传递
 *  (2)object 默认也是值传递，但是对象值传递是对象标识符
 *  (3)array 默认是值传递，通过加 & 可以引用传递
 *  (4)null 默认是值传递，通过加 & 可以引用传递
 *  (5)resource  是值传递.通过加 & 可以引用传递
 *     
 * */

 
 
/*
Person对象格式

object(Person)#1 (3) {
        ["name"]=> string(6) "张三"
        ["age"]=> string(2) "12"
        ["sex"]=> string(3) "男"
}

    #1表示对象序号（由系统内部维护,不同对象的序号不同），每个序号分别指向一个对象的数据空间，
每个变量指向一个对象序号
    $obj ----> #1 -----> object(Person){"name"=>"张三","age"=>"12","sex"=>"男"};
    因此,当$obj1=$obj;值传递只是复制一份 "#1"
        当$obj1=&$obj;引用传递只是共同指向 "#1"
*/
?>