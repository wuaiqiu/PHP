						PHP命名空间
						
1.用于解决类（包括抽象类）、接口、函数和常量同名冲突

2.第一个namespace必须在其它所有代码（html）之前声明命名空间,除了declare

3.在命名空间里，define的作用是全局的，而const则作用于当前空间。 --demo1

4.同一个命名空间可以定义在多个文件中，即允许将同一个命名空间的内容分割存放在不同的文件中。

5.定义子命名空间，即可以使用分层次的方式定义  ---demo1

6.可以在同一个文件中定义多个命名空间 --demo2
	（1）namespace 命名空间名1;
		....
		namespace 命名空间名2;
		...
		
	(2)namespace  命名空间名1{
	
	
	}
	
	namespace  命名空间名2{
	
	
	}
	
7.使用命名空间
	(1)非限定名称,例如 $a=new foo()。如果当前命名空间是 currentnamespace，
foo 将被解析为 currentnamespace\foo。如果使用 foo 的代码是全局的，不包含在
任何命名空间中的代码，则 foo 会被解析为foo。--demo3
	(2)限定名称,例如 $a = new subnamespace\foo(); 如果当前的命名空间是 currentnamespace，
则 foo 会被解析为 currentnamespace\subnamespace\foo。如果使用 foo 的代码是全局的，不包含在
任何命名空间中的代码，foo 会被解析为subnamespace\foo。 --demo3
	(3)完全限定名称，例如， $a = new \currentnamespace\foo(); 在这种情况下，foo 总是被解析
为代码中的文字名(literal name)currentnamespace\foo --demo3


8.__NAMESPACE__常量,当前命名空间名称的字符串,在全局的，不包括在任何命名空间中的代码，它包含一
个空的字符串。

9.使用命名空间：别名/导入,为类名称使用别名、为接口使用别名或为命名空间名称使用别名。
		use My\Full\Classname as Another;
		$obj = new Another; // My\Full\Classname
		$obj = new \Another; // 全局Another
		$obj = new Another\thing; //  My\Full\Classname\thing
		$obj = new \Another\thing; //全局 Another\thing
		
10.在命名空间中使用全局： \Another
	
		
